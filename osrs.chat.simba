{$DEFINE INCLUDED_RSCHAT}
{$include_once osrs.simba}

type
  TRSChat = record
    Bounds: TBox;
    LineBoxes: TBoxArray;
    InputLineBox: TBox;
  end;

function TRSChat.GetDisplayNameBox(out Color: TColor): TBox; overload;
var
  TPA: TPointArray;
begin
  for Color in [$FFFFFF, $000000] do
  begin
    TPA := Target.FindColor(Color, 0, Self.InputLineBox);
    if (Length(TPA) > 0) then
      Exit(TPA.Bounds());
  end;
end;

function TRSChat.GetDisplayNameBox(): TBox; overload;
var
  _: TColor;
begin
  Result := Self.GetDisplayNameBox(_);
end;

function TRSChat.GetDisplayName(): String;
begin
  Result := RSOCR.RecognizeStatic(Self.InputLineBox, FONT_PLAIN_12, [Colors.WHITE], 0);
  if (Result.Pop <> ':') then
    Result := '';
end;

function TRSChat.GetLineText(Line: Integer): String;
const
  StaticOffset = 2; // Make static text placement so static recognition can be used

  function RecognizeTransparent(b: TBox): String;
  var
    Image: TImage;
    TPA: TPointArray;
  begin
    Image := Target.GetImage(b);

    // First shadow from above line draws over our line.
    // Mark the shadow as a match since OCR requires 100% character match.
    TPA := Image.FindColor($000000, 0, [0, StaticOffset, Image.Width, StaticOffset]);
    Image.DrawColor := $FFFFFF;
    Image.DrawTPA(TPA);

    // Now find shadows, offset by -1,-1 to find colors of text
    TPA := Image.FindColor(0, 0, [1, 1, Image.Width, Image.Height]);
    TPA := TPA.Offset([-1,-1]).ExcludePoints(TPA);
    Image.ReplaceColorBinary(False, Image.GetColors(TPA).Unique, 0);

    Result := RSOCR.Engine.Recognize(Image, FONT_PLAIN_12, [0,0]);
  end;

  function Recognize(b: TBox): String;
  const
    BG_COLOR: TColorTolerance = [$6793AA, 3.287, EColorSpace.HSL, [2.025, 0.581, 0.395]];
  var
    TPA: TPointArray;
    TextColors: TColorArray;
  begin
    TPA := Target.FindColor(BG_COLOR, B).Invert();
    TextColors := Target.GetColors(TPA).Unique();

    Result := RSOCR.Recognize(b, FONT_PLAIN_12, TextColors, 0);
  end;

var
  B: TBox;
begin
  B := Self.LineBoxes[Line];
  B.Y1 -= StaticOffset;

  if Self.IsTransparent() then
    Result := RecognizeTransparent(B)
  else
    Result := Recognize(B);
end;

function TRSChat.GetText: TStringArray;
var
  I: Integer;
begin
  SetLength(Result, Length(Self.LineBoxes));
  for I := 0 to High(Result) do
    Result[I] := Self.GetLineText(I);
end;

function TRSChat.IsTransparent: Boolean;
var
  Color: TColor;
begin
  Self.GetDisplayNameBox(Color);

  Result := Color = (Colors.WHITE);
end;

function TRSChat.GetDialog: String;
begin
  Result := RSOCR.RecognizeLines(Self.Bounds, FONT_QUILL_8, [$FFFFFF,$800000,$000000,$FF0000,$000080], 1).Join(' ');
end;

function TRSChat.ClickDialog(Text: String): Boolean;
var
  Match: TPixelOCRMatch;
begin
  RSOCR.RecognizeLines(Self.Bounds, FONT_QUILL_8, [$FFFFFF,$800000,$000000,$FF0000,$000080], 1);

  for Match in RSOCR.Matches(Self.Bounds) do
    if (Text in Match.Text) then
    begin
      RSMouse.Click(Match.Bounds, EMouseButton.LEFT);
      Exit(True);
    end;
end;

function TRSChat.HasDialog(Text: String): Boolean;
begin
  Result := Text in Self.GetDialog();
end;

function TRSChat.HasLevelUp: Boolean;
begin
  Result := Self.HasDialog('Congratulations, you just advanced a ');
end;

function TRSChat.GetQuery: String;
begin
  Result := RSOCR.RecognizeLines(Self.Bounds, FONT_BOLD, [0], 1).Join(' ');
end;

function TRSChat.HasQuery(SubString: String): Boolean;
begin
  Result := SubString in Self.GetQuery();
end;

function TRSChat.AnswerQuery(Query, Answer: String): Boolean;

  function CurrentAnswer: String;
  begin
    Result := RSOCR.Recognize(Self.Bounds, FONT_BOLD, [$7F0000], 1);
  end;

  function EraseAnswer: Boolean;
  var
    Timeout: Int64;
  begin
    if (CurrentAnswer() = '*') then
      Exit(True);

    Timeout := Time() + 2000;
    while (Timeout > Time()) and (CurrentAnswer() <> '*') do
    begin
      Target.KeyPress(EKeyCode.BACK);

      Sleep(RandomLeft(0, 100));
    end;
    Result := CurrentAnswer() = '*';
  end;

var
  StartingQuery: String;
  Curr: String;
begin
  StartingQuery := Self.GetQuery();

  if (Query in StartingQuery) then
  begin
    Curr := CurrentAnswer();
    if (Curr = Answer + '*') then
      Target.KeyPress(EKeyCode.RETURN)
    else
    begin
      if (not EraseAnswer()) then
        Exit;

      Target.KeySend(Answer);
      Target.KeyPress(EKeyCode.RETURN);
    end;

    Result := SleepUntil(Self.GetQuery() <> StartingQuery, 100, RandomLeft(2000, 3000));
  end;
end;

procedure TRSChat.Setup;
begin
  Self.Bounds := RSInterfaceUtils.BoundsFromBottomLeft([0, -165], 518, 141);
  Self.LineBoxes := TBoxArray.Create([Self.Bounds.X1 + 10, Self.Bounds.Y1 + 8], 1, 9, Self.Bounds.Width - 35, 13, [0, 1]);
  Self.InputLineBox := Self.LineBoxes.Pop;
  Self.InputLineBox.Y2 += 2;
end;

var
  RSChat: TRSChat;
