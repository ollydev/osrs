{$i osrs/osrs}

var
  Interfaces: array of record
    Name: String;
    Bounds: TBox;
    Fields: TRTTIFields;
  end;

begin
  Interfaces += ['Bank', Bank.Bounds, RTTIFields(Bank)];
  Interfaces += ['BankPin', BankPin.Bounds, RTTIFields(BankPin)];
  Interfaces += ['Login', Login.Bounds, RTTIFields(Login)];
  Interfaces += ['Logout', Logout.Bounds, RTTIFields(Logout)];
  Interfaces += ['Options', Options.Bounds, RTTIFields(Options)];
end;

type
  TRSInterfaceBuilder = record
    Form: TLazForm;
    ShapeBox: TShapeBox;
    Name: String;
    Bounds: TBox;
    Menu: TLazMainMenu;
    MenuItemDirectionUp: TLazMenuItem;
    MenuItemDirectionDown: TLazMenuItem;
    InterfaceMenu: TLazMenuItem;
  end;

procedure TRSInterfaceBuilder.DoOffsetDirectionClick(Sender: TObject);
var
  Shape: TShapeBoxShape;
  FromBottom: Boolean;
begin
  Shape := Self.ShapeBox.Selected;
  if (Shape = []) then
    Exit;

  FromBottom := (Sender = Self.MenuItemDirectionDown);

  Self.MenuItemDirectionUp.Checked := not FromBottom;
  Self.MenuItemDirectionDown.Checked := FromBottom;

  Boolean(Shape.UserData^) := FromBottom;

  Self.ShapeBox.RePaint();
end;

procedure TRSInterfaceBuilder.DoSelectionChanged(Sender: TObject);
var
  Shape: TShapeBoxShape;
  FromBottom: Boolean;
begin
  Shape := Self.ShapeBox.Selected;
  if Shape = [] then
    Exit;

  FromBottom := Boolean(Self.ShapeBox.Selected.UserData^);
  Self.MenuItemDirectionUp.Checked := not FromBottom;
  Self.MenuItemDirectionDown.Checked := FromBottom;
end;

procedure TRSInterfaceBuilder.DoPaintShapeBox(Sender: TImageBox; Bitmap: TImageBoxCanvas; Rect: TLazRect);
var
  Shape: TShapeBoxShape;
begin
  Shape := Self.ShapeBox.Selected;
  if Shape = [] then
    Exit;

  if Self.MenuItemDirectionDown.Checked then
  begin
    Bitmap.DrawLineGap(TPoint.Create(Shape.Box.X1, Shape.Box.Y2), TPoint.Create(Rect.Left, Shape.Box.Y2), 5, $00FFFF);
    Bitmap.DrawLineGap(TPoint.Create(Shape.Box.X1, Shape.Box.Y2), TPoint.Create(Shape.Box.X1, Rect.Bottom), 5, $00FFFF);
  end else
  begin
    Bitmap.DrawLineGap(TPoint.Create(Shape.Box.X1, Shape.Box.Y1), TPoint.Create(Rect.Left, Shape.Box.Y1), 5, $00FFFF);
    Bitmap.DrawLineGap(TPoint.Create(Shape.Box.X1, Shape.Box.Y1), TPoint.Create(Shape.Box.X1, Rect.Top), 5, $00FFFF);
  end;
end;

procedure TRSInterfaceBuilder.OnUpdateImageButtonClick(Sender: TObject);
begin
  Self.ShapeBox.SetImage(TImage.CreateFromTarget(Self.Bounds));
end;

procedure TRSInterfaceBuilder.OnFormClose(Sender: TObject; var CloseAction: ELazFormCloseAction);
begin
  Self.PrintElements(nil);
end;

procedure TRSInterfaceBuilder.DoInterfaceMenuClick(Sender: TObject);

  function StringToElement(Str: String): TRSInterfaceElement;
  begin
    Result.Name := Str.Between('NAME = ', ',');

    with (Str.Between('BOUNDS = {', '}') + '}') do // todo codetools
    begin
      Result.Bounds.X1 := Between('X1 = ', ',').ToInt() - Self.Bounds.X1;
      Result.Bounds.Y1 := Between('Y1 = ', ',').ToInt() - Self.Bounds.Y1;
      Result.Bounds.X2 := Between('X2 = ', ',').ToInt() - Self.Bounds.X1;
      Result.Bounds.Y2 := Between('Y2 = ', '}').ToInt() - Self.Bounds.Y1;
    end;

    with (Str.Between('PLACEMENT = {', '}') + '}') do
    begin
      Result.Placement.X          := Between('X = ', ',').ToInt();
      Result.Placement.Y          := Between('Y = ', ',').ToInt();
      Result.Placement.Width      := Between('WIDTH = ', ',').ToInt();
      Result.Placement.Height     := Between('HEIGHT = ', ',').ToInt();
      Result.Placement.FromBottom := Between('FROMBOTTOM = ', '}').ToBoolean();
    end;
  end;

var
  I: Integer;
  Field: TRTTIField;
  Element: TRSInterfaceElement;
begin
  for I := 0 to High(Interfaces) do
    if (Interfaces[I].Name = TLazMenuItem(Sender).Caption) then
    begin
      Self.Name := Interfaces[I].Name;
      Self.Bounds := Interfaces[I].Bounds;

      Self.ShapeBox.BeginUpdate();
      Self.ShapeBox.Clear();
      for Field in Interfaces[i].Fields do
        if (Field.VarType = 'TRSInterfaceElement') then
        begin
          Element := StringToElement(Field.Value);

          Self.ShapeBox.ManualAddBox(Element.Bounds, Element.Name, Element);
        end;

      Self.ShapeBox.EndUpdate();

      Break;
    end;

  Self.OnUpdateImageButtonClick(nil);
end;

procedure TRSInterfaceBuilder.PrintElements(Sender: TObject);
var
  I, MaxLen: Integer;
  Shape: TShapeBoxShape;
  Padding, Str: String;
  Element: TRSInterfaceElement;
  Fields: String;
begin
  for I := 0 to Self.ShapeBox.Count - 1 do
  begin
    Fields += '    ' + Self.ShapeBox.Shape[I].Name + ': TRSInterfaceElement;' + LINE_SEP;
    if (Self.ShapeBox.Shape[I].Name.Length > MaxLen) then
      MaxLen := Self.ShapeBox.Shape[I].Name.Length;
  end;

  ClearSimbaOutput();

  for I := 0 to Self.ShapeBox.Count - 1 do
  begin
    Shape := Self.ShapeBox.Shape[I];
    Padding := ' ' * (MaxLen - Shape.Name.Length);

    // Update element from box
    Element := Shape.UserData^;
    Element.Placement.X := Shape.Box.X1;
    if Element.Placement.FromBottom then
      Element.Placement.Y := (Self.ShapeBox.Background.Height - 1) - Shape.Box.Y2
    else
      Element.Placement.Y := Shape.Box.Y1;

    Element.Placement.Width := Shape.Box.Width - 1;
    Element.Placement.Height := Shape.Box.Height - 1;

    Str += "  Self.%s%s := TRSInterfaceElement.Create(Self.Bounds, '%s', [%d, %d, %d, %d, %s]);".Format([Shape.Name, Padding, Shape.Name, Element.Placement.X, Element.Placement.Y, Element.Placement.Width, Element.Placement.Height, ToString(Element.Placement.FromBottom)]) + LINE_SEP;
  end;

  WriteLn(Fields);
  WriteLn(Str.TrimRight());
  SetClipBoard(Str.TrimRight());
end;

procedure TRSInterfaceBuilder.Run;
var
  Button: TLazButton;
  I: Integer;
begin
  try
    Self.Form := TLazForm.Create();
    Self.Form.Position := ELazFormPosition.ScreenCenter;
    Self.Form.Caption := 'Interface Element Builder';
    Self.Form.Width := 1200;
    Self.Form.Height := 1000;
    Self.Form.OnClose := @Self.OnFormClose;

    Self.Menu := TLazMainMenu.Create(Self.Form);
    Self.Menu.Parent := Self.Form;
    Self.InterfaceMenu := Self.Menu.AddMenu('Select Interface');
    with Self.Menu.AddMenu('Set Offset Direction') do
    begin
      Self.MenuItemDirectionUp := AddMenu('Top');
      Self.MenuItemDirectionUp.OnClick := @Self.DoOffsetDirectionClick;
      Self.MenuItemDirectionDown := AddMenu('Bottom');
      Self.MenuItemDirectionDown.OnClick := @Self.DoOffsetDirectionClick;
    end;

    Self.ShapeBox := TShapeBox.Create(Self.Form, SizeOf(TRSInterfaceElement));
    Self.ShapeBox.Parent := Self.Form;
    Self.ShapeBox.Align := ELazAlign.Client;
    Self.ShapeBox.OnImgPaint := @Self.DoPaintShapeBox;
    Self.ShapeBox.QueryName := True;
    Self.ShapeBox.OnSelectionChange := @Self.DoSelectionChanged;

    Self.ShapeBox.NewButton.Caption := 'New Element';
    Self.ShapeBox.NewButton.PopupMenu.Items.Delete(3);
    Self.ShapeBox.NewButton.PopupMenu.Items.Delete(2);
    Self.ShapeBox.NewButton.PopupMenu.Items.Delete(0);
    Self.ShapeBox.NewButton.PopupMenu.Items.Item[0].Caption := 'Add Element';
    Self.ShapeBox.ClearButton.Caption := 'Clear';
    Self.ShapeBox.PrintButton.Caption := 'Print';
    Self.ShapeBox.PrintButton.OnClick := @Self.PrintElements;

    Self.ShapeBox.SetImage(TImage.CreateFromTarget());

    for I := 0 to High(Interfaces) do
      Self.InterfaceMenu.AddMenu(Interfaces[I].Name).OnClick := @Self.DoInterfaceMenuClick;

    Self.Form.ShowModal();
  except
    Writeln(GetExceptionMessage());
  finally
    Self.Form.Free();
  end;
end;

var
  InterfaceBuilder: TRSInterfaceBuilder;

begin
  InterfaceBuilder.Run();
end;
