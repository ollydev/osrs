{$DEFINE INCLUDED_MINIMAP}
{$include_once osrs.simba}

type
  EMinimapDot = enum(PLAYER, NPC);
  EMinimapDots = set of EMinimapDot;

  EMinimapOrb = enum(HP, PRAYER, RUN, SPECIAL);

  TRSMinimap = record
    const ImgDotPlayer:     TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAP21aQABAAAAIKprAAEAAADI5D8BAAAAAM0CAQABAAAA0ELlCAAAAACwQ+UIAAAAAAgAAAAIAAAA0ELlCAAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAEUlEQVR4nGP4BwYMQPzmzRsAUvoLs3htHuEAAAAASUVORK5CYII=');
    const ImgDotNPC:        TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAI22aQABAAAAsKprAAEAAAC45D8BAAAAAP0CAQABAAAA8HXQCwAAAADwdtALAAAAAAgAAAAIAAAA8HXQCwAAAAABAAAAAgAAAAIAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP484fp61cGBiD19i0DADpsB7kcRHcXAAAAAElFTkSuQmCC');
    const ImgDotItem:       TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAI22aQABAAAAsKprAAEAAAC45D8BAAAAAP0CAQABAAAA8HXQCwAAAAAwbtALAAAAAAgAAAAIAAAA8HXQCwAAAAABAAAAAgAAAAIAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP4p6Dwh42NAYg/MjAAACMDBECYtZu9AAAAAElFTkSuQmCC');
    const ImgMaskResizable: TImage = ImageFromString('IMG:AQAAAJgAAACYAAAAAAAAACDkPwEAAAAASN8/AAEAAACQ4z8BAAAAAAF+DwABAAAAkOM/AQAAAADxDAEAAQAAAFDAkwkAAAAAAQAAAJgAAACYAAAAIAAAAAAAAAAAAAAAAAAAAAMAAAAgCBAICAgACBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAYAAAAYwiAhAAAC0ElEQVR4nO3dy07jUBBF0fz/T9NCrUakMYkf97juYy3JYsIgVbVngHk8Ho8Pz9fTSvUcPT3lH2DkkI6qnltgqSE7Vb0XgZ0dalDVexPYq0EmU71Pgb090Tyq97xcYKuq3vv0gfFX9R2mC4xt1XcZPjD2qb7TcIFxTvXdhgiMa6rv121gtFV9z24CI+Pj29dlA+MeSwbGvZYJjFpTB0YfpgyMvkwVGH2aIjD6NnRgjGHIwBjLUIExpiECY2xdB8YcugyMuXQVGHPqIjDmJjCiSgNjDSWBsZZbA2NNAiPqlsBYm8CIigYGnyKBwXcCI6ppYLBFYEQ1CQxeERhRlwKDPQRG1KnA4AiBEXUoMDhDYEQJjKhdgcEVAiNKYEQJjDiBESUwogRGlMCIExhRAiNqMzBoRWDECYyop8CgNYER9RUYJAiMKG0BAAAAAAAAMCY/8SbKLxwSJTCi/NEHUQIjSmCkeHUAUQIjSmBECYwogRElMGK8gI4ogRHlBXRECYyYX19jDi0IjCiBEeU/fRDzoyeB0ZLAiHobmMg4a7MlgdGKwIjaHZjIOOrXjgRGC4cDExl7vWxIYFx1OjCR8c7bft59g8h4pUlgImPLrm72BiYy/tc8MJHxz+5eBMYZscBExqFWBMYRh1sRGL8500aTwEQ2txZhCYwfWoYlMJ4k4roUmMjmkYrrcmAiG18yLoEtLh1Xk8BENqY74moWmMjGM1xgIhvHXXE1D0xkYxg6MJH17c64YoGJrF/TBCayPk0VmNj6M21gQuvD9IGJrNYSgYmszjKBiazGUoGJ7D5l960OTGR5pbetjktkWeV3rf4AAsuovmd3gQmtjer7dR+YyM6rvtswgQntmOo7DRuY0F6rvss0gQntWfUdpg1s9RCr9yqwrQEnUL1Dge0ZdDDV+xLYmWE7V70fgbUYuCPVuxBYaugi1XMLrHoZjVTP0c3zBw7WBhQ3wcmQAAAAAElFTkSuQmCC');
    const ImgMaskFixed:     TImage = ImageFromString('IMG:AQAAAJEAAACXAAAAAAAAACDkPwEAAAAASN8/AAEAAACQ4z8BAAAAAAF+DwABAAAAkOM/AQAAAADxDAEAAQAAAFDAkwkAAAAAAQAAAJEAAACXAAAAIAAAAAAAAAAAAAAAAAAAAAMAAAAgCBAICAgACBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAJEAAACXCAYAAAAVgbk+AAADGElEQVR4nO3cyY4bMQxAQf//TycIggniXRLVopYqoO8m+WDMYdq32+32y3P3lMr+nDM96R9gtjh6y55bRNHhJpO9DxGVDrSI7D2J6HGIxWXv79iIdpW91+0jOk32vreK6HTZ+186Iu5l32O5iHgt+y5LRESZ7DtNGRFtsu82RUT0cWxE9HVcRFzjiIgYY9uIGGu7iMixTUTkWjoi5rJcRMxpmYiY2/QRsYZpI2It00XEmqaJiLWJiLD0iNhDWkTsZXhE7GlYROxNRIRdHhFnuCwiztI9Is4kIsK6RcTZRERYOCL4Q0SENUcE/6uOCF4REWHFEcEnIiLsa0RQQkSEiYiwtxFBDRERJiLCREQXIiLsLiJoISLCREQfAiJMRADA4fw5RJiICBMRYSIiTESEiYgwEREmIsJERJiICBMRYSIiTESE/fv3WGhx994ZtHh6eRFqiYgwERHmXXzCRESYiAjxS2mEiYgwEREmIsJERNjLiKCGbyJCnn5AX0TUEhFhHyMSEt889iIiqomIsKKIhMQ7r1oREVVERFhVRELi0btORESxpoiExI9PjYiIIqGIhMS3PkTEV10iEtK5StoojkhI5yntoioiIZ2jpgkR8dKlEQlpf7U9NEUkpH21tNAckZD209pBKCIx7SF6/y4RCWldPW7fLSIhrafX3btGJKY19L73JREJaV5X3PqyiAQ1j6vvOyQiMeUYddehEQlpnJE3HR6RmK6Vccu0iITUX9YdUyMSUx/Z95siIiG1y77bVBGJqU72naaOSEyfZd9lqYiE9Cz7HktGJKa/sve/RUQnh5S9960iOi2m7D1vHdEJIWXv94iIdg4pe69HRbRjSNn7PDKinULK3uPREe0QUvb+RPQzxKKy9yaix0EWk70vEb0bZhHZexLRt4Eml70fEZUONansvYioZqhJZe9FRDVDTSp7LyKqHWwy2fsQUctgk8neh4haBptM9j5E1DrcJLL3IKLogMmy5xdRz0EHy55XRFcNO0j2nCK6cthBsucU0YihL5I9l4hGD95Z9jwimugplf05p3l+A9SpAlAgkblvAAAAAElFTkSuQmCC');

    Bounds: TBox;
    Center: TPoint;

    CompassBounds: TBox;
    CompassCenter: TPoint;
    CompassCache: record
      Dials: TPointArray;
      Deg: Single;
    end;

    OrbBounds: array[EMinimapOrb] of TBox;
  end;

function TRSMinimap.GetImage: TImage;
begin
  Result := TImage.CreateFromTarget(Self.Bounds);
  //Result.DrawAlpha := 175;
  Result.DrawImage(Self.GetMask(), [0, 0]);
end;

function TRSMinimap.ReadOrb(Orb: EMinimapOrb): Integer;
var
  B: TBox;
begin
  B := Self.OrbBounds[Orb];
  B.Y1 := B.Y1 + 10;
  B.X2 := B.X1 + 22;

  Result := OCR.RecognizeShadow(B, FONT_PLAIN_11, 0).ToInt(-1);
end;

function TRSMinimap.GetOrbCircle(Orb: EMinimapOrb): TCircle;
begin
  with Self.OrbBounds[Orb] do
    Result := [X2 - 12, Y2 - 12, 13];
end;

procedure TRSMinimap.ClickOrb(Orb: EMinimapOrb);
begin
  Target.MouseMove(Self.GetOrbCircle(Orb).RandomPointCenter());
  Target.MouseClick(EMouseButton.Left);
end;

function TRSMinimap.GetSpecialAttack: Integer;
begin
  Result := Self.ReadOrb(EMinimapOrb.SPECIAL);
end;

function TRSMinimap.UseSpecialAttack(SpecNeeded: Integer): Boolean;
begin
  Result := Self.GetSpecialAttack() >= SpecNeeded;
  if Result then
    Self.ClickOrb(EMinimapOrb.SPECIAL);
end;

function TRSMinimap.GetMask: TImage;
begin
  if (RSClient.ClientMode() = ERSClientMode.FIXED) then
    Result := Self.ImgMaskFixed
  else
    Result := Self.ImgMaskResizable;
end;

function TRSMinimap.GetCompassAngle: Single;
var
  dials, northarr, westeastdials, southarr, westarr, eastarr: TPointArray;
  north,south,west,east: TPoint;
  n,w,e,s,x,y: Single;
begin
  dials := Target.FindColor(920735, 1, Self.CompassBounds);
  dials := dials.ExtractDist(Self.CompassCenter, 10, 18);
  if (dials.Equals(Self.CompassCache.Dials)) then
    Exit(Self.CompassCache.Deg);
  Self.CompassCache.Dials := dials;

  northarr := Target.FindColor(1911089, 1, Self.CompassBounds);
  north    := northarr.ExtractDist(Self.CompassCenter, 0, 18).Mean();

  southarr := dials.ExtractDist(north, 22.5, 9999);
  south    := southarr.FurthestPoint(Self.CompassCenter);

  dials  := dials.ExcludePoints(southarr);
  for dials in dials.Cluster(3) do
    if CrossProduct(dials.Mean(), north, south) > 0 then
      westarr := dials
    else
      eastarr := dials;

  west := westarr.FurthestPoint(eastarr.Mean());
  east := eastarr.FurthestPoint(westarr.Mean());

  n := ArcTan2(north.y - Self.CompassCenter.y, north.x - Self.CompassCenter.x) + PI/2;
  s := ArcTan2(south.y - Self.CompassCenter.y, south.x - Self.CompassCenter.x) - PI/2;
  w := ArcTan2(west.y  - Self.CompassCenter.y, west.x  - Self.CompassCenter.x) + PI;
  e := ArcTan2(east.y  - Self.CompassCenter.y, east.x  - Self.CompassCenter.x);

  x := Cos(s) + Cos(e) + Cos(w) + Cos(n);
  y := Sin(s) + Sin(e) + Sin(w) + Sin(n);

  Result := RadToDeg(ArcTan2(y/4, x/4));
  if Result < 0 then
    Result := Result + 360;

  Self.CompassCache.Deg := Result;
end;

function TRSMinimap.GetDots(Dots: EMinimapDots): TPointArray; overload;
var
  Dot: EMinimapDot;
  Img: TImage;
begin
  Target.FreezeImage(Self.Bounds);
  for Dot in Dots do
  begin
    case Dot of
      EMinimapDot.NPC:    Img := Self.ImgDotNPC;
      EMinimapDot.PLAYER: Img := Self.ImgDotPlayer;
    end;

    Result += Target.FindImageEx(Img, 0);
  end;
  Target.UnFreezeImage();
end;

function TRSMinimap.GetDots(Dot: EMinimapDot): TPointArray; overload;
begin
  Result := Self.GetDots([Dot]);
end;

function TRSMinimap.IsPointOn(P: TPoint): Boolean;
begin
  if (P in Self.Bounds) then
  begin
    P.X -= Self.Bounds.X1;
    P.Y -= Self.Bounds.Y1;

    Result := Self.GetMask().Alpha[P.X, P.Y] = 0;
  end;
end;

function TRSMinimap.IsPointOnEx(P: TPoint; SizeMod: Double): Boolean;
begin
  if (P in Self.Bounds) then
  begin
    P.X -= Self.Bounds.X1;
    P.Y -= Self.Bounds.Y1;

    Result := not Self.GetMask().FindAlpha(255).IsPointNearby(P, 0, SizeMod);
  end;
end;

function TRSMinimap.FilterPoints(Points: TPointArray): TPointArray;
var
  Mask: TPointArray;
begin
  Mask := Self.GetMask().FindAlpha(0).Offset(Self.Bounds.TopLeft);
  Result := Points.Intersection(Mask);
end;

function TRSMinimap.CountColor(Color: TColor; Tolerance: Single = 0): Integer; overload;
begin
  Result := Length(Self.FilterPoints(Target.FindColor(Color, Tolerance, Self.Bounds)));
end;

function TRSMinimap.CountColor(Color: TColorTolerance): Integer; overload;
begin
  Result := Length(Self.FilterPoints(Target.FindColor(Color, Self.Bounds)));
end;

procedure TRSMinimap.Setup;
begin
  case RSClient.ClientMode() of
    ERSClientMode.FIXED:
      begin
        Self.Bounds := InterfaceUtils.BoundsFromTopRight([-195,9], 144, 150);
        Self.CompassBounds := InterfaceUtils.BoundsFromTopRight([-221,3], 33, 33);

        Self.OrbBounds[EMinimapOrb.HP] := InterfaceUtils.BoundsFromTopRight([-245,45], 48, 25);
        Self.OrbBounds[EMinimapOrb.PRAYER] := InterfaceUtils.BoundsFromTopRight([-245,79], 48, 25);
        Self.OrbBounds[EMinimapOrb.RUN] := InterfaceUtils.BoundsFromTopRight([-235,111], 48, 25);
        Self.OrbBounds[EMinimapOrb.SPECIAL] := InterfaceUtils.BoundsFromTopRight([-213,136], 48, 25);
      end;

    ERSClientMode.RESIZABLE_CLASSIC,
    ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Bounds := InterfaceUtils.BoundsFromTopRight([-158,8], 151, 151);
        Self.CompassBounds := InterfaceUtils.BoundsFromTopRight([-177,5], 33, 33);

        Self.OrbBounds[EMinimapOrb.HP] := InterfaceUtils.BoundsFromTopRight([-207,51], 48, 25);
        Self.OrbBounds[EMinimapOrb.PRAYER] := InterfaceUtils.BoundsFromTopRight([-207,85], 48, 25);
        Self.OrbBounds[EMinimapOrb.RUN] := InterfaceUtils.BoundsFromTopRight([-197,117], 48, 25);
        Self.OrbBounds[EMinimapOrb.SPECIAL] := InterfaceUtils.BoundsFromTopRight([-175,142], 48, 25);
      end;
  end;

  Self.Center := Self.Bounds.Center;
  Self.CompassCenter := Self.CompassBounds.Center;
end;

var
  Minimap: TRSMinimap;
