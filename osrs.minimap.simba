{$DEFINE INCLUDED_MINIMAP}
{$include_once osrs.simba}

type
  EMinimapDot = enum(PLAYER, NPC);
  EMinimapDots = set of EMinimapDot;

  EMinimapOrb = enum(HP, PRAYER, RUN, SPECIAL);

  TRSMinimapInterface = record
    const ImgDotPlayer:     TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAP21aQABAAAAIKprAAEAAADI5D8BAAAAAM0CAQABAAAA0ELlCAAAAACwQ+UIAAAAAAgAAAAIAAAA0ELlCAAAAAABAAAAAgAAAAIAAAAYAAAAAAAAAAAAAAAAAAAAAwAAABgIEAgICAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAEUlEQVR4nGP4BwYMQPzmzRsAUvoLs3htHuEAAAAASUVORK5CYII=');
    const ImgDotNPC:        TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAI22aQABAAAAsKprAAEAAAC45D8BAAAAAP0CAQABAAAA8HXQCwAAAADwdtALAAAAAAgAAAAIAAAA8HXQCwAAAAABAAAAAgAAAAIAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP484fp61cGBiD19i0DADpsB7kcRHcXAAAAAElFTkSuQmCC');
    const ImgDotItem:       TImage = ImageFromString('IMG:AQAAAAIAAAACAAAAAAAAAI22aQABAAAAsKprAAEAAAC45D8BAAAAAP0CAQABAAAA8HXQCwAAAAAwbtALAAAAAAgAAAAIAAAA8HXQCwAAAAABAAAAAgAAAAIAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAEAAAIAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAAFUlEQVR4nGP4p6Dwh42NAYg/MjAAACMDBECYtZu9AAAAAElFTkSuQmCC');
    const ImgMaskResizable: TImage = ImageFromString('IMG:AQAAAJgAAACYAAAAAAAAAJDjPwEAAAAAwQIJAAEAAACQ4z8BAAAAALEMAQABAAAAkOmCAQAAAACQoM4JAAAAAGACAABgAgAAkOmCAQAAAAABAAAAmAAAAJgAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAAAAAAAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAIAAACXoLd2AAAABnRSTlMAAAAAAABupgeRAAACi0lEQVR4nO3cQZLiMBBEUbj/pXszM00w2NhSqSor9X8QbFhYzrfrxjwej6fLa6zyY4fdfvkJMtmMaetPoIBngFp/AjW8o8qnaAmpXPk4DSB7VT6XImTfyqdTgfSofkYIA9sO0rstIPfJGXK3DCF3zgSSnn/fG0PSa10h6f+aQdJ5PSDpSuqQdD1dSLqbIiSNpQVJM6lA0nz1kBRVJSTFVgNJK8qGpHXlQdLqMiApJyBNWgtJma2CpPziIakqIE2KhKTagDQpBpIUmoUknYA0aRyS1ALSpBFI0gxIk+5BknJAmnQVkvQD0qTvkNQlIE0C0qQzSOoVkCYBaRKQPgFpEpAmAWkSkD4BaRKQJr1DUtOA9AlIk34hqXVAmvQHkroHpEkgEhERERERERERERG9xB/OTeIfyyYBaRJfvjIJSJOANIhHBkwC0iQgTQLSJCBNAtIhHnQ1CUiTeNDVJCAd+vDzLNQxIE0C0iR++cqhJ5AeAWnSISSWjXqHA7JpQJr0BRLLFn1QA7JjlyCxFO8zGZDtugGJpWyHXkcfYKnZCCSWap1JnUNiKdUUJJYifTECsksBkFiW9x0ISP0uAQEp2EWUEUgscxogBFKrYUIghZpUvAeJ5aLmFW9DYhleiCKQxUUpjkBiGVWg4iAkliFJQGI5WaziFCSWM2lBYjlWuGIAJJYDiUJieTddSERv1QASziu1gcTyvE6QWJ7UDBLLo/pBYvnWwp1XQ2L5r7UjJ0Bi+UhYGMjVJS2cc5k9OVO3zbzYVpbZwyZfbwfOmklLrurKWTlm4bWdOOtnLD9Bd+byiXpAKouWb9ISUoezfAQHyELL8ht3g8y0LL9Tc8illuW3thdkFG35sWNePwzzFBo2j8O9AAAAAElFTkSuQmCC');
    const ImgMaskFixed:     TImage = ImageFromString('IMG:AQAAAJEAAACXAAAAAAAAAIDjPwEAAAAA7joBAAEAAACQ4z8BAAAAALEMAQABAAAArNaCAQAAAADsLIQBAAAAAEQCAABEAgAArNaCAQAAAAABAAAAkQAAAJcAAAAgAAAAAAAAAAAAAAAAAAAAAwAAACAIEAgICAAIGAAAAAAAAAAAAAAAAAAAAAAAAAAAiVBORw0KGgoAAAANSUhEUgAAAJEAAACXCAIAAACa4y5pAAAABnRSTlMAAAAAAABupgeRAAACqElEQVR4nO3bS27kMBAE0db9L+3FDGDD7taHLDIzyQjoAKp8MHojv16vY6HnPPnrlZ0pf4NClZ7kp61mNjP5sdlm2uTnJ5m5JR/E18w/+UQuZonta5beXmYrtYXZeq1stnarme3TCmZ7Fmy2c5FmlGRGPwswo79Zm9GnTM3oPC8zup+FGT1NbEZtycyoJ4EZ9TfVjKqaZEa1YZbXcDMa0UAzGtcQMxpdsRnNCbO8ysxoZgVmNL8uM1KFWV6NZqQNs7wem5FDmOX1wIx8umVGbmGW14UZeYZZXh/NyDnM8sIsrzdm5B9meWGWF2aRYZbXtxmlhFlemGUGWF6YERFRevyW5YVZXpjlhVlemOWFWV6Y5YVZXpjlhVlemOWFWV6Y5fX/2wJK6cAsroNveOLCLC/M8uJ7/bwwywuzsPg/z7wwywuzvDDLC7O8fpuRf/ydhXVgFhdmeb03g822A7O4MMvrzAw2ww7M4sIsr2sz2Kz6q4OZe3fNYDPpLQ1m1j0zg03eJxfMfGsxg03YCcqFGWySzkWuzWCb3CUHZnbVmME2rTsWd81gm9BNiAdmsA3tvsIzM+RG9HT/FjPYCmsYv9EMtpLalm83Q66nns17zWBrqHPwAjPwbla1c6UZcp+qXbjeDLZflc87xAy5fw0adqDZ5mzjVh1rtqfc6D1nmG3FNmHMSWY7yE2bcarZqnKTBxSYLcY2fz2N2Rpyqt2UZtFswtHEZoly8rkszILY5EMZmUWwySeyMzNnk49jambLJp/F2syQTT5IgJkVm3yKGDMTNvkIYWZyNvn5kWZCNvnhwWYSNvnJmGGGmcGjfwMrNvmxmGGGmcejfwMfNvmZS5lNYJMfuKDZODn5UYublbPJz8EMM+NnT61ss042+ctvavbmmHWdvp8vL+MYGlUk74gAAAAASUVORK5CYII=');

    Bounds: TBox;
    Center: TPoint;

    CompassBounds: TBox;
    OrbBounds: array[EMinimapOrb] of TBox;
  end;

function TRSMinimapInterface.GetImage: TImage;
begin
  Result := TImage.CreateFromTarget(Self.Bounds);
  //Result.DrawAlpha := 175;
  Result.DrawImage(Self.GetMask(), [0, 0]);
end;

function TRSMinimapInterface.ReadOrb(Orb: EMinimapOrb): Integer;
var
  B: TBox;
begin
  B := Self.OrbBounds[Orb];
  B.Y1 := B.Y1 + 10;
  B.X2 := B.X1 + 22;

  Result := OCR.RecognizeNumber(B, TOCRShadowFilter.Create(), FONT_PLAIN_11);
end;

function TRSMinimapInterface.GetOrbCircle(Orb: EMinimapOrb): TCircle;
begin
  with Self.OrbBounds[Orb] do
    Result := [X2 - 12, Y2 - 12, 13];
end;

procedure TRSMinimapInterface.ClickOrb(Orb: EMinimapOrb);
begin
  Target.MouseMove(Self.GetOrbCircle(Orb).RandomPointCenter());
  Target.MouseClick(EMouseButton.Left);
end;

function TRSMinimapInterface.GetSpecialAttack: Integer;
begin
  Result := Self.ReadOrb(EMinimapOrb.SPECIAL);
end;

function TRSMinimapInterface.UseSpecialAttack(SpecNeeded: Integer): Boolean;
begin
  Result := Self.GetSpecialAttack() >= SpecNeeded;
  if Result then
    Self.ClickOrb(EMinimapOrb.SPECIAL);
end;

function TRSMinimapInterface.GetMask: TImage;
begin
  if (RSClient.ClientMode() = ERSClientMode.FIXED) then
    Result := Self.ImgMaskFixed
  else
    Result := Self.ImgMaskResizable;
end;

function TRSMinimapInterface.GetDots(Dots: EMinimapDots): TPointArray; overload;
var
  Dot: EMinimapDot;
  Img: TImage;
begin
  Target.FreezeImage(Self.Bounds);
  for Dot in Dots do
  begin
    case Dot of
      EMinimapDot.NPC:    Img := Self.ImgDotNPC;
      EMinimapDot.PLAYER: Img := Self.ImgDotPlayer;
    end;

    Result += Target.FindImageEx(Img, 0);
  end;
  Target.UnFreezeImage();
end;

function TRSMinimapInterface.GetDots(Dot: EMinimapDot): TPointArray; overload;
begin
  Result := Self.GetDots([Dot]);
end;

function TRSMinimapInterface.IsPointOn(P: TPoint): Boolean;
begin
  if (P in Self.Bounds) then
  begin
    P.X -= Self.Bounds.X1;
    P.Y -= Self.Bounds.Y1;

    Result := Self.GetMask().Alpha[P.X, P.Y] = 0;
  end;
end;

function TRSMinimapInterface.IsPointOnEx(P: TPoint; SizeMod: Double): Boolean;
begin
  if (P in Self.Bounds) then
  begin
    P.X -= Self.Bounds.X1;
    P.Y -= Self.Bounds.Y1;

    Result := not Self.GetMask().FindAlpha(255).IsPointNearby(P, 0, SizeMod);
  end;
end;

function TRSMinimapInterface.FilterPoints(Points: TPointArray): TPointArray;
var
  Mask: TPointArray;
begin
  Mask := Self.GetMask().FindAlpha(0).Offset(Self.Bounds.TopLeft);
  Result := Points.Intersection(Mask);
end;

function TRSMinimapInterface.CountColorMasked(Color: TColor; Tolerance: Single = 0): Integer; overload;
begin
  Result := Length(Self.FilterPoints(Target.FindColor(Color, Tolerance, Self.Bounds)));
end;

function TRSMinimapInterface.CountColorMasked(Color: TColorTolerance): Integer; overload;
begin
  Result := Length(Self.FilterPoints(Target.FindColor(Color, Self.Bounds)));
end;

procedure TRSMinimapInterface.Setup;
begin
  case RSClient.ClientMode() of
    ERSClientMode.FIXED:
      begin
        Self.Bounds := InterfaceUtils.BoundsFromTopRight([-195,9], 144, 150);
        Self.CompassBounds := InterfaceUtils.BoundsFromTopRight([-221,3], 33, 33);

        Self.OrbBounds[EMinimapOrb.HP] := InterfaceUtils.BoundsFromTopRight([-245,45], 48, 25);
        Self.OrbBounds[EMinimapOrb.PRAYER] := InterfaceUtils.BoundsFromTopRight([-245,79], 48, 25);
        Self.OrbBounds[EMinimapOrb.RUN] := InterfaceUtils.BoundsFromTopRight([-235,111], 48, 25);
        Self.OrbBounds[EMinimapOrb.SPECIAL] := InterfaceUtils.BoundsFromTopRight([-213,136], 48, 25);
      end;

    ERSClientMode.RESIZABLE_CLASSIC,
    ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Bounds := InterfaceUtils.BoundsFromTopRight([-158,8], 151, 151);
        Self.CompassBounds := InterfaceUtils.BoundsFromTopRight([-177,5], 33, 33);

        Self.OrbBounds[EMinimapOrb.HP] := InterfaceUtils.BoundsFromTopRight([-207,51], 48, 25);
        Self.OrbBounds[EMinimapOrb.PRAYER] := InterfaceUtils.BoundsFromTopRight([-207,85], 48, 25);
        Self.OrbBounds[EMinimapOrb.RUN] := InterfaceUtils.BoundsFromTopRight([-197,117], 48, 25);
        Self.OrbBounds[EMinimapOrb.SPECIAL] := InterfaceUtils.BoundsFromTopRight([-175,142], 48, 25);
      end;
  end;

  Self.Center := Self.Bounds.Center;
end;

var
  Minimap: TRSMinimapInterface;
