{$DEFINE INCLUDED_OCR}
{$include_once osrs.simba}

type
  TRSOCR = record
    const FONTS_PATH = {$macro DIR} + 'ocr/fonts/';

    Engine: TPixelOCR;
  end;

var
  OCR: TRSOCR;

var
  FONT_PLAIN_11:    TPixelFont := OCR.Engine.LoadFont(OCR.FONTS_PATH + 'Plain 11', 4);
  FONT_PLAIN_12:    TPixelFont := OCR.Engine.LoadFont(OCR.FONTS_PATH + 'Plain 12', 4);
  FONT_BOLD:        TPixelFont := OCR.Engine.LoadFont(OCR.FONTS_PATH + 'Bold 12', 4);
  FONT_BOLD_SHADOW: TPixelFont := OCR.Engine.LoadFont(OCR.FONTS_PATH + 'Bold 12 Shadow', 4);
  FONT_QUILL_8:     TPixelFont := OCR.Engine.LoadFont(OCR.FONTS_PATH + 'Quill 8', 4);
  FONT_QUILL:       TPixelFont := OCR.Engine.LoadFont(OCR.FONTS_PATH + 'Quill', 4);

function TRSOCR.RecognizeStatic(Bounds: TBox; Font: TPixelFont; Colors: TColorArray; Tolerance: Single): String; overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(Bounds);
  img.ReplaceColorBinary(False, Colors, Tolerance);
  Result := Self.Engine.Recognize(img, Font, [0,0]);
  img.Free();
end;

function TRSOCR.RecognizeStaticInvert(Bounds: TBox; Font: TPixelFont; Colors: TColorArray): String; overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(Bounds);
  img.ReplaceColorBinary(True, Colors);
  Result := Self.Engine.Recognize(img, Font, [0,0]);
  img.Free();
end;

function TRSOCR.Recognize(Bounds: TBox; Font: TPixelFont; Colors: TColorArray; Tolerance: Single): String; overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(Bounds);
  img.ReplaceColorBinary(False, Colors, Tolerance);
  Result := Self.Engine.Recognize(img, Font);
  img.Free();
end;

function TRSOCR.RecognizeLines(Bounds: TBox; Font: TPixelFont; Colors: TColorArray; Tolerance: Single): TStringArray;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(Bounds);
  img.ReplaceColorBinary(False, Colors, Tolerance);
  Result := Self.Engine.RecognizeLines(img, Font);
  img.Free();
end;

function TRSOCR.RecognizeShadow(Bounds: TBox; Font: TPixelFont; Tolerance: Single): String; overload;
var
  Image: TImage;
  Shadows, ShadowsOffset: TPointArray;
  Color: TColor;
begin
  Image := TImage.CreateFromTarget(Bounds);
  Shadows := Image.FindColor(0, 2.5, [1, 1, Image.Width - 1, Image.Height - 1]);
  Shadows := Shadows.Offset([-1,-1]).ExcludePoints(Shadows);
  Color := Image.GetColors(Shadows).Mode;
  Image.ReplaceColorBinary(False, Color, Tolerance);
  Result := Self.Engine.Recognize(Image, Font);
  Image.Free();
end;

function TRSOCR.Locate(Bounds: TBox; Text: String; Colors: TColorArray; Tolerance: Single; Font: TPixelFont): Single; overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(Bounds);
  img.ReplaceColorBinary(False, Colors, Tolerance);
  Result := Self.Engine.Locate(img, Font, Text);
  img.Free();
end;

function TRSOCR.LocateInvert(Bounds: TBox; Text: String; Colors: TColorArray; Tolerance: Single; Font: TPixelFont): Single; overload;
var
  img: TImage;
begin
  img := TImage.CreateFromTarget(Bounds);
  img.ReplaceColorBinary(True, Colors, Tolerance);
  Result := Self.Engine.Locate(img, Font, Text);
  img.Free();
end;

function CountItemStack(Area: TBox): Int64;
const
  Colors = [RSColors.ITEM_TEXT_YELLOW, RSColors.ITEM_TEXT_WHITE, RSColors.ITEM_TEXT_GREEN];
  Multipliers = [1, 1000, 1000000];
var
  I: Integer;
  Text: String;
begin
  for I := 0 to High(Colors) do
  begin
    Text := OCR.Recognize(Area.Expand(1), FONT_PLAIN_11, [Colors[I]], 0);
    if Text.IsInteger then
      Exit(Text.ToInt() * Multipliers[I]);
  end;
  Result := -1;
end;


