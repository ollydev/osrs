{$DEFINE INCLUDED_RSBANK}
{$include_once osrs.simba}

type
  ERSBankQuantity = enum(
    UNKNOWN,
    ONE,
    FIVE,
    TEN,
    CUSTOM,
    ALL
  );

  ERSBankWithdrawMode = enum(
    UNKNOWN,
    ITEM,
    NOTE
  );

  TRSBank = record
    ElementSwap: TRSInterfaceElement;
    ElementQuantityX: TRSInterfaceElement;
    ElementQuantityAll: TRSInterfaceElement;
    ElementQuantity5: TRSInterfaceElement;
    ElementQuantity10: TRSInterfaceElement;
    ElementQuantity1: TRSInterfaceElement;
    ElementWithdrawItem: TRSInterfaceElement;
    ElementInsert: TRSInterfaceElement;
    ElementWithdrawNote: TRSInterfaceElement;
    ElementPlaceholders: TRSInterfaceElement;
    ElementSearch: TRSInterfaceElement;
    ElementDepositInv: TRSInterfaceElement;
    ElementDepositWorn: TRSInterfaceElement;
    ElementClose: TRSInterfaceElement;

    Bounds: TBox;
    ItemArea: TBox;
  end;

function TRSBank.IsTitle(Text: String): Boolean;
begin
  Result := RSInterfaceUtils.IsTitle(Self.Bounds, Text);
end;

function TRSBank.ReadTitle: String;
begin
  Result := RSInterfaceUtils.ReadTitle(Self.Bounds);
end;

function TRSBank.IsOpen: Boolean;
begin
  Result := Self.IsTitle('Bank') or Self.IsTitle('Tab') or Self.IsTitle('Showing') or Self.IsTitle('Equip');
end;

function TRSBank.GetQuantity: ERSBankQuantity;
begin
  if Self.ElementQuantity1.ButtonEnabled()   then Exit(ERSBankQuantity.ONE);
  if Self.ElementQuantity5.ButtonEnabled()   then Exit(ERSBankQuantity.FIVE);
  if Self.ElementQuantity10.ButtonEnabled()  then Exit(ERSBankQuantity.TEN);
  if Self.ElementQuantityX.ButtonEnabled()   then Exit(ERSBankQuantity.CUSTOM);
  if Self.ElementQuantityAll.ButtonEnabled() then Exit(ERSBankQuantity.ALL);
end;

function TRSBank.GetWithdraw: ERSBankWithdrawMode;
begin
  if Self.ElementWithdrawItem.ButtonEnabled() then Exit(ERSBankWithdrawMode.ITEM);
  if Self.ElementWithdrawNote.ButtonEnabled() then Exit(ERSBankWithdrawMode.NOTE);
end;

function TRSBank.FindItemBoxes: TBoxArray;
var
  Color: TColor;
  TPA: TPointArray;
  B: TBox;
begin
  // Start with border with some tolerance (for placeholders)
  TPA := Target.FindColor(Color, 12.5, Self.ItemArea);
  for Color in [RSColors.ITEM_TEXT_YELLOW, RSColors.ITEM_TEXT_WHITE, RSColors.ITEM_TEXT_GREEN] do
    TPA += Target.FindColor(Color, 0, Self.ItemArea);

  for TPA in TPA.Cluster(Self.ItemArea.Width, 3) do
  begin
    B := TPA.Bounds;
    if (B.Height <= 5) or (B.Y1 + 32 > Self.ItemArea.Y2) then
      Continue;

    Result += TBoxArray.Create([Self.ItemArea.X1, B.Y1 - 1], 8, 1, 32, 32, [16, 0]);
  end;
end;

function TRSBank.ItemFind(ItemName: String; out ItemBox: TBox): Boolean;
var
  Boxes: TBoxArray;
  Arr: TIntegerArray;
begin
  Boxes := Self.FindItemBoxes();
  Arr := RSInterfaceUtils.ItemFind(ItemName, Boxes, 1);
  Result := Length(Arr) = 1;
  if Result then
    ItemBox := Boxes[Arr[0]];
end;

function TRSBank.ItemFind(ItemName: String): Boolean; overload;
var
  _: TBox;
begin
  Result := Self.ItemFind(ItemName, _);
end;

function TRSBank.ItemMouse(ItemName: String): Boolean;
var
  ItemBox: TBox;
begin
  Result := Self.ItemFind(ItemName, ItemBox);
  if Result then
    Target.MouseMove(ItemBox);
end;

function TRSBank.ItemClick(ItemName: String; Button: EMouseButton): Boolean;
begin
  Result := Self.ItemMouse(ItemName);
  if Result then
    Target.MouseClick(Button);
end;

function TRSBank.ItemCountStack(ItemName: String): Integer;
var
  ItemBox: TBox;
begin
  if Self.ItemFind(ItemName, ItemBox) then
    Result := CountItemStack(ItemBox);
end;

function TRSBank.ItemWithdraw(ItemName: String; Quantity: Integer): Boolean;
begin
  if Self.ItemClick(ItemName, EMouseButton.RIGHT) then
  begin
    RSMenu.Select('Withdraw-' + ToString(Quantity) + ' ');
  end;
end;

function TRSBank.IsSearching: Boolean;
begin
  Result := Self.ElementSearch.ButtonEnabled;
end;

function TRSBank.GetCurrentSearch: String;
var
  Text: String;
begin
  if (RSMainScreen.GetUpText() <> 'Search') then
    Self.ElementSearch.Hover();

  Text := Self.ReadTitle();
  if Text.StartsWith('Showing items: ') then
    Result := Text.After('Showing items: ');
end;

function TRSBank.DepositAll: Boolean;
begin
  if (RSInventory.CountUsedSlots = 0) then
    Exit(True);

  if Self.IsOpen() then
  begin
    Self.ElementDepositInv.Click();

    Result := SleepUntil(RSInventory.IsEmpty(), RandomLeft(100, 1000), 2000);
  end;
end;

function TRSBank.StopSearching: Boolean;
begin
  if Self.IsSearching() then
  begin
    Self.ElementSearch.Click();

    Result := SleepUntil(not Self.IsSearching(), RandomLeft(100, 1000), 2500);
  end else
    Result := True;
end;

function TRSBank.Search(Text: String): Boolean;
begin
  // check if already searched
  if Self.IsSearching() then
  begin
    if RSChat.AnswerQuery('Show items whose names', Text) then
      Exit(True);
    if (Self.GetCurrentSearch() = Text) then
      Exit(True);
  end;

  if Self.StopSearching() then
  begin
    Self.ElementSearch.Click();

    Result := SleepUntil(RSChat.AnswerQuery('Show items whose names', Text), 100, Random(2000, 3000));
  end;
end;

procedure TRSBank.Setup;
begin
  Self.Bounds := RSInterfaceUtils.BoundsFromCenter(488, 800);

  Self.ItemArea := Self.Bounds;
  Self.ItemArea.X1 += 57;
  Self.ItemArea.Y1 += 77;
  Self.ItemArea.X2 -= 62;
  Self.ItemArea.Y2 -= 43;

  Self.ElementSwap         := TRSInterfaceElement.Create(Self.Bounds, 'ElementSwap', [5, 5, 49, 21, True]);
  Self.ElementQuantityX    := TRSInterfaceElement.Create(Self.Bounds, 'ElementQuantityX', [281, 6, 23, 20, True]);
  Self.ElementQuantityAll  := TRSInterfaceElement.Create(Self.Bounds, 'ElementQuantityAll', [305, 6, 24, 20, True]);
  Self.ElementQuantity5    := TRSInterfaceElement.Create(Self.Bounds, 'ElementQuantity5', [230, 6, 24, 20, True]);
  Self.ElementQuantity10   := TRSInterfaceElement.Create(Self.Bounds, 'ElementQuantity10', [255, 6, 24, 20, True]);
  Self.ElementQuantity1    := TRSInterfaceElement.Create(Self.Bounds, 'ElementQuantity1', [205, 5, 24, 21, True]);
  Self.ElementWithdrawItem := TRSInterfaceElement.Create(Self.Bounds, 'ElementWithdrawItem', [105, 5, 49, 21, True]);
  Self.ElementInsert       := TRSInterfaceElement.Create(Self.Bounds, 'ElementInsert', [55, 5, 49, 21, True]);
  Self.ElementWithdrawNote := TRSInterfaceElement.Create(Self.Bounds, 'ElementWithdrawNote', [155, 5, 49, 21, True]);
  Self.ElementPlaceholders := TRSInterfaceElement.Create(Self.Bounds, 'ElementPlaceholders', [331, 6, 35, 35, True]);
  Self.ElementSearch       := TRSInterfaceElement.Create(Self.Bounds, 'ElementSearch', [370, 6, 35, 35, True]);
  Self.ElementDepositInv   := TRSInterfaceElement.Create(Self.Bounds, 'ElementDepositInv', [409, 6, 35, 35, True]);
  Self.ElementDepositWorn  := TRSInterfaceElement.Create(Self.Bounds, 'ElementDepositWorn', [446, 6, 35, 35, True]);
  Self.ElementClose        := TRSInterfaceElement.Create(Self.Bounds, 'ElementClose', [460, 7, 20, 20, False]);
end;

var
  RSBank: TRSBank;

function TRSInventory.IsOpen: Boolean; override;
begin
  if RSBank.IsOpen() then
    Result := True
  else
    Result := inherited;
end;
