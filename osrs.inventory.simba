{$DEFINE INCLUDED_INVENTORY}
{$include_once osrs.simba}

type
  TRSInventoryTab = record
    Bounds: TBox;
    Slots: TBoxArray;
  end;

function TRSInventoryTab.IsOpen: Boolean;
begin
  Result := GameTabs.IsCurrentTab(ERSGameTab.INVENTORY);
end;

function TRSInventoryTab.Open: Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.INVENTORY);
end;

function TRSInventoryTab.MouseSlot(Index: Integer): Boolean;
begin
  Target.MouseMove(Self.Slots[Index]);
end;

function TRSInventoryTab.IsSlotSelected(Index: Integer): Boolean;
var
  B: TBox;
begin
  B := Self.Slots[Index];
  B.Y1 += 8; // Skip (possible) item text

  Result := IsItemSelected(B);
end;

function TRSInventoryTab.GetSelectedSlot: Integer;
begin
  for Result := 0 to 27 do
    if Self.IsSlotSelected(Result) then
      Exit;

  Result := -1;
end;

function TRSInventoryTab.IsEmpty: Boolean;
begin
  Result := not IsItemIn(Self.Bounds);
end;

function TRSInventoryTab.IsFull: Boolean;
begin
  Result := Length(Self.GetUsedSlots()) = 28;
end;

function TRSInventoryTab.GetUsedSlots: TIntegerArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, Count: Integer;
begin
  TPA := FindItemBorder(Self.Slots.Merge()) + Self.Slots.Centers();
  if (Length(TPA) <= Length(Self.Slots)) then
    Exit;
  ATPA := TPA.PartitionEx([Self.Slots[0].X1, Self.Slots[0].Y1], 40, 36);

  SetLength(Result, Length(Self.Slots));
  for I := 0 to High(ATPA) do
    if (Length(ATPA[I]) > 1) then
    begin
      Result[Count] := I;
      Inc(Count);
    end;
  SetLength(Result, Count);
end;

function TRSInventoryTab.CountUsedSlots: Integer;
begin
  Result := Length(Self.GetUsedSlots());
end;

function TRSInventoryTab.FindItems(ItemName: String): TIntegerArray;
begin
  if not Self.Open() then
    Exit;

  Result := InterfaceUtils.ItemFind(ItemName, Self.Slots);
end;

function TRSInventoryTab.FindAllItems(ItemNames: TStringArray): TIntegerArray;
begin
  if not Self.Open() then
    Exit;

  Result := InterfaceUtils.ItemFind(ItemNames, Self.Slots);
end;

function TRSInventoryTab.FindItem(ItemName: String): Integer;
var
  Arr: TIntegerArray;
begin
  Arr := InterfaceUtils.ItemFind(ItemName, Self.Slots, 1);
  if Length(Arr) then
    Result := Arr[0]
  else
    Result := -1;
end;

function TRSInventoryTab.MouseItem(ItemName: String): Boolean;
var
  Index: Integer;
begin
  Index := Self.FindItem(ItemName);

  Result := Index > -1;
  if Result then
    Self.MouseSlot(Index);
end;

function TRSInventoryTab.ClickItem(ItemName: String; Button: EMouseButton): Boolean;
begin
  if not Self.Open() then
    Exit;

  Result := InterfaceUtils.ItemClick(ItemName, Self.Slots, Button);
end;

function TRSInventoryTab.ClickAnyItem(ItemNames: TStringArray; Button: EMouseButton): Boolean;
begin
  if not Self.Open() then
    Exit;

  Result := InterfaceUtils.ItemClickAny(ItemNames, Self.Slots, Button);
end;

function TRSInventoryTab.CountItem(ItemName: String): Integer;
begin
  Result := Length(Self.FindItems(ItemName));
end;

function TRSInventoryTab.CountAllItems(ItemNames: TStringArray): Integer;
begin
  Result := Length(Self.FindAllItems(ItemNames));
end;

function TRSInventoryTab.CountItemStack(ItemName: String): Integer;
var
  Index: Integer;
begin
  Index := Self.FindItem(ItemName);
  if (Index > -1) then
    Result := CountItemStack(Self.Slots[Index]);
end;

function TRSInventoryTab.HasItem(ItemName: String): Boolean;
begin
  Result := Self.FindItem(ItemName) > -1;
end;

function TRSInventoryTab.HasAnyItems(ItemNames: TStringArray): Boolean;
var
  ItemName: String;
begin
  for ItemName in ItemNames do
    if Self.FindItem(ItemName) > -1 then
      Exit(True);
end;

procedure TRSInventoryTab.Setup;
begin
  Self.Bounds := GameTabs.TabBounds;
  Self.Slots := TBoxArray.Create([Self.Bounds.X1 + 16, Self.Bounds.Y1 + 9], 4, 7, 35, 31, [7, 5]);
end;

var
  Inventory: TRSInventoryTab;
