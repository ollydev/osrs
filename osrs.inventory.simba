{$DEFINE INCLUDED_RSINVENTORY}
{$include_once osrs.simba}

type
  TRSInventory = record
    Bounds: TBox;
    Slots: TBoxArray;
  end;

function TRSInventory.IsOpen: Boolean;
begin
  Result := RSGameTabs.IsCurrentTab(ERSGameTab.INVENTORY);
end;

function TRSInventory.Open: Boolean;
begin
  Result := Self.IsOpen() or RSGameTabs.Open(ERSGameTab.INVENTORY);
end;

function TRSInventory.MouseSlot(Index: Integer): Boolean;
begin
  RSMouse.Move(Self.Slots[Index]);
end;

function TRSInventory.IsSlotSelected(Index: Integer): Boolean;
var
  B: TBox;
begin
  B := Self.Slots[Index];
  B.Y1 += 8; // Skip (possible) item text

  Result := IsItemSelected(B);
end;

function TRSInventory.GetSelectedSlot: Integer;
begin
  for Result := 0 to 27 do
    if Self.IsSlotSelected(Result) then
      Exit;

  Result := -1;
end;

function TRSInventory.IsEmpty: Boolean;
begin
  Result := not IsItemIn(Self.Slots.Merge());
end;

function TRSInventory.IsFull: Boolean;
begin
  Result := Length(Self.GetUsedSlots()) = 28;
end;

function TRSInventory.GetUsedSlots: TIntegerArray;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, Count: Integer;
begin
  TPA := FindItemBorder(Self.Slots.Merge()) + Self.Slots.Centers();
  if (Length(TPA) <= Length(Self.Slots)) then
    Exit;
  ATPA := TPA.PartitionEx([Self.Slots[0].X1, Self.Slots[0].Y1], 40, 36);

  SetLength(Result, Length(Self.Slots));
  for I := 0 to High(ATPA) do
    if (Length(ATPA[I]) > 1) then
    begin
      Result[Count] := I;
      Inc(Count);
    end;
  SetLength(Result, Count);
end;

function TRSInventory.CountUsedSlots: Integer;
begin
  Result := Length(Self.GetUsedSlots());
end;

function TRSInventory.ItemFind(ItemName: String): TIntegerArray; overload;
begin
  if Self.Open() then
    Result := RSItemFinder.Find(ItemName, Self.Slots);
end;

function TRSInventory.ItemFind(ItemNames: TStringArray): TIntegerArray; overload;
begin
  if Self.Open() then
    Result := RSItemFinder.Find(ItemNames, Self.Slots);
end;

function TRSInventory.ItemMouse(ItemName: String): Boolean;
begin
  if Self.Open() then
    Result := RSItemFinder.Mouse(ItemName, Self.Slots);
end;

function TRSInventory.ItemClick(ItemName: String; Button: EMouseButton): Boolean;
begin
  if Self.Open() then
    Result := RSItemFinder.Click(ItemName, Self.Slots, Button);
end;

function TRSInventory.ItemClickAny(ItemNames: TStringArray; Button: EMouseButton): Boolean;
begin
  if Self.Open() then
    Result := RSItemFinder.ClickAny(ItemNames, Self.Slots, Button);
end;

function TRSInventory.ItemCount(ItemName: String): Integer; overload;
begin
  if Self.Open() then
    Result := RSItemFinder.Count(ItemName, Self.Slots);
end;

function TRSInventory.ItemCount(ItemNames: TStringArray): Integer; overload;
begin
  if Self.Open() then
    Result := RSItemFinder.Count(ItemNames, Self.Slots);
end;

function TRSInventory.ItemCountStack(ItemName: String): Integer;
begin
  if Self.Open() then
    Result := RSItemFinder.CountStack(ItemName, Self.Slots);
end;

function TRSInventory.ItemExists(ItemName: String): Boolean; overload;
begin
  if Self.Open() then
    Result := Self.ItemFind(ItemName) <> [];
end;

function TRSInventory.ItemExists(ItemNames: TStringArray): Boolean; overload;
var
  ItemName: String;
begin
  for ItemName in ItemNames do
    if Self.ItemFind(ItemName) <> [] then
      Exit(True);
end;

procedure TRSInventory.Setup;
begin
  Self.Bounds := RSGameTabs.TabBounds;
  Self.Slots := TBoxArray.Create([Self.Bounds.X1 + 16, Self.Bounds.Y1 + 9], 4, 7, 35, 31, [7, 5]);
end;

var
  RSInventory: TRSInventory;
