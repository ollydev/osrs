{$DEFINE INCLUDED_RSLOGIN}
{$include_once osrs.simba}

type
  TRSLoginPlayer = record
    User: String;
    Password: String;
    Pin: String;
  end;

  TRSLogin = record
    ElementExistingUser: TRSInterfaceElement;
    ElementWorld: TRSInterfaceElement;
    ElementLoginField: TRSInterfaceElement;
    ElementPassField: TRSInterfaceElement;
    ElementResponse: TRSInterfaceElement;

    Bounds: TBox;

    Players: array of TRSLoginPlayer;
    PlayerIndex: Integer;
  end;

function TRSLogin.IsOpen: Boolean;
begin
  Result := Self.ElementWorld.HasText('World', [Colors.WHITE], 0, FONT_BOLD);
end;

function TRSLogin.GetResponse: String;
begin
  Result := Self.ElementResponse.ReadTextLines([Colors.YELLOW], 0, FONT_BOLD).Join(' ');
end;

function TRSLogin.ClickDialogs: Boolean;
begin
  if Self.ElementExistingUser.HasText('Existing User', [Colors.WHITE], 0, FONT_BOLD) then
  begin
    Self.ElementExistingUser.Click(EMouseButton.LEFT);

    Exit(True);
  end;
end;

function TRSLogin.EnterField(Element: TRSInterfaceElement; Details: String): Boolean;
begin
  if Self.ClickDialogs() then
    Sleep(Random(600, 1200));

  if Element.HasText(Details + ' ', [Colors.WHITE], 0, FONT_BOLD) then
    Exit(True);

  // Move caret
  while not SleepUntil(Element.HasColor($00FFFF, 15), 100, RandomLeft(800, 1600)) do
  begin
    if not Self.IsOpen() then
      Exit(False);

    Target.KeyPress(EKeyCode.TAB);
  end;

  // Erase field
  while Element.HasColor($FFFFFF) do
  begin
    if not Self.IsOpen() then
      Exit(False);

    Target.KeyPress(EKeyCode.BACK);
    Sleep(RandomLeft(0, 50));
  end;
  Target.KeySend(Details);

  Result := True;
end;

function TRSLogin.EnterGame: Boolean;
var
  T: UInt64;
begin
  T := Time() + 3500;
  while (T > Time()) do
  begin
    if ClickText('CLICK HERE TO PLAY', Colors.WHITE, 0, FONT_BOLD, Self.Bounds) then
      Break;
    Sleep(100);
  end;

  Result := RSClient.IsLoggedIn(5000);
end;

procedure TRSLogin.AddPlayer(User, Pass: String; Pin: String = '');
begin
  Self.Players += [User, Pass, Pin];
end;

procedure TRSLogin.Setup;
begin
  Self.Bounds := TBox.Create(
    (Target.Width - 1) div 2 - (765 div 2),
    0,
    (Target.Width - 1) div 2 + (765 div 2),
    502
  );

  Self.ElementExistingUser := TRSInterfaceElement.Create(Self.Bounds, 'ElementExistingUser', [395, 275, 134, 32, False]);
  Self.ElementWorld        := TRSInterfaceElement.Create(Self.Bounds, 'ElementWorld', [15, 465, 81, 16, False]);
  Self.ElementLoginField   := TRSInterfaceElement.Create(Self.Bounds, 'ElementLoginField', [311, 240, 238, 17, False]);
  Self.ElementPassField    := TRSInterfaceElement.Create(Self.Bounds, 'ElementPassField', [341, 258, 208, 14, False]);
  Self.ElementResponse     := TRSInterfaceElement.Create(Self.Bounds, 'ElementResponse', [225, 186, 320, 51, False]);
end;

var
  RSLogin: TRSLogin;
